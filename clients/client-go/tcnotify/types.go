// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package tcnotify

import (
	"encoding/json"
	"errors"
)

type (
	// Request to post a message on IRC.
	ChannelMessage struct {

		// Channel to post the message in.
		//
		// Syntax:     ^[#&][^ ,\u0007]{1,199}$
		// Min length: 1
		Channel string `json:"channel"`

		// IRC message to send as plain text.
		//
		// Min length: 1
		// Max length: 510
		Message string `json:"message"`
	}

	// Optional link that can be added as a button to the email.
	Link struct {

		// Where the link should point to.
		//
		// Min length: 1
		// Max length: 1024
		Href string `json:"href"`

		// Text to display on link.
		//
		// Min length: 1
		// Max length: 40
		Text string `json:"text"`
	}

	// List of notification addresses.
	ListOfNotificationAdresses struct {
		Addresses []NotificationTypeAndAddress `json:"addresses"`

		// A continuation token is returned if there are more results than listed
		// here. You can optionally provide the token in the request payload to
		// load the additional results.
		ContinuationToken string `json:"continuationToken,omitempty"`
	}

	// Type of notification and its corresponding address.
	NotificationTypeAndAddress struct {
		NotificationAddress string `json:"notificationAddress"`

		// Possible values:
		//   * "email"
		//   * "pulse"
		//   * "irc-user"
		//   * "irc-channel"
		//   * "matrix-room"
		NotificationType string `json:"notificationType"`
	}

	// Request to post a message on IRC.
	//
	// One of:
	//   * ChannelMessage
	//   * PrivateMessage
	PostIRCMessageRequest json.RawMessage

	// Request to post a message on pulse.
	PostPulseMessageRequest struct {

		// Pulse message to send as plain text.
		//
		// Additional properties allowed
		Message json.RawMessage `json:"message"`

		// Routing-key to use when posting the message.
		//
		// Max length: 255
		RoutingKey string `json:"routingKey"`
	}

	// Request to post a message on IRC.
	PrivateMessage struct {

		// IRC message to send as plain text.
		//
		// Min length: 1
		// Max length: 510
		Message string `json:"message"`

		// User to post the message to.
		//
		// Syntax:     ^[A-Za-z\[\]\\~_\^{|}][A-Za-z0-9\-\[\]\\~_\^{|}]{0,254}$
		// Min length: 1
		// Max length: 255
		User string `json:"user"`
	}

	// Request to send an email
	SendEmailRequest struct {

		// E-mail address to which the message should be sent
		Address string `json:"address"`

		// Content of the e-mail as **markdown**, will be rendered to HTML before
		// the email is sent. Notice that markdown allows for a few HTML tags, but
		// won't allow inclusion of script tags and other unpleasantries.
		//
		// Min length: 1
		// Max length: 102400
		Content string `json:"content"`

		// Optional link that can be added as a button to the email.
		Link Link `json:"link,omitempty"`

		// Reply-to e-mail (this property is optional)
		ReplyTo string `json:"replyTo,omitempty"`

		// Subject line of the e-mail, this is plain-text
		//
		// Min length: 1
		// Max length: 255
		Subject string `json:"subject"`

		// E-mail html template used to format your content.
		//
		// Possible values:
		//   * "simple"
		//   * "fullscreen"
		//
		// Default:    "simple"
		Template string `json:"template,omitempty"`
	}

	// Request to send a Matrix notice. Many of these fields are better understood by
	// checking the matrix spec itself. The precise definitions of these fields is
	// beyond the scope of this document.
	SendMatrixNoticeRequest struct {

		// Unformatted text that will be displayed in the room if you do not
		// specify `formattedBody` or if a user's client can not render the format.
		Body string `json:"body"`

		// The format for `formattedBody`. For instance, `org.matrix.custom.html`
		Format string `json:"format,omitempty"`

		// Text that will be rendered by matrix clients that support the given
		// format in that format. For instance, `<h1>Header Text</h1>`.
		FormattedBody string `json:"formattedBody,omitempty"`

		// Which of the `m.room.message` msgtypes to use. At the moment only the
		// types that take `body`/`format`/`formattedBody` are supported.
		//
		// Possible values:
		//   * "m.notice"
		//   * "m.text"
		//   * "m.emote"
		//
		// Default:    "m.notice"
		Msgtype string `json:"msgtype,omitempty"`

		// The fully qualified room name, such as `!whDRjjSmICCgrhFHsQ:mozilla.org`
		// If you are using riot, you can find this under the advanced settings for a room.
		RoomID string `json:"roomId"`
	}
)

// MarshalJSON calls json.RawMessage method of the same name. Required since
// PostIRCMessageRequest is of type json.RawMessage...
func (this *PostIRCMessageRequest) MarshalJSON() ([]byte, error) {
	x := json.RawMessage(*this)
	return (&x).MarshalJSON()
}

// UnmarshalJSON is a copy of the json.RawMessage implementation.
func (this *PostIRCMessageRequest) UnmarshalJSON(data []byte) error {
	if this == nil {
		return errors.New("PostIRCMessageRequest: UnmarshalJSON on nil pointer")
	}
	*this = append((*this)[0:0], data...)
	return nil
}
